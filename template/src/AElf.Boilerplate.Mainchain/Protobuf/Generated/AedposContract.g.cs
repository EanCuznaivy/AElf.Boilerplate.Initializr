// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: aedpos_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.Consensus.AEDPoS {

  /// <summary>Holder for reflection information generated from aedpos_contract.proto</summary>
  internal static partial class AedposContractReflection {

    #region Descriptor
    /// <summary>File descriptor for aedpos_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AedposContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVhZWRwb3NfY29udHJhY3QucHJvdG8aEmFlbGYvb3B0aW9ucy5wcm90bxoP",
            "YWVsZi9jb3JlLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8a",
            "H2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHmdvb2dsZS9wcm90",
            "b2J1Zi93cmFwcGVycy5wcm90byKNAQohSW5pdGlhbEFFbGZDb25zZW5zdXND",
            "b250cmFjdElucHV0EhgKEGlzX3Rlcm1fc3RheV9vbmUYASABKAgSFQoNaXNf",
            "c2lkZV9jaGFpbhgCIAEoCBIWCg50aW1lX2VhY2hfdGVybRgDIAEoEhIfChdt",
            "aW5lcl9pbmNyZWFzZV9pbnRlcnZhbBgEIAEoEiLtBgoQVXBkYXRlVmFsdWVJ",
            "bnB1dBIdCglvdXRfdmFsdWUYASABKAsyCi5hZWxmLkhhc2gSHQoJc2lnbmF0",
            "dXJlGAIgASgLMgouYWVsZi5IYXNoEhAKCHJvdW5kX2lkGAMgASgSEiUKEXBy",
            "ZXZpb3VzX2luX3ZhbHVlGAUgASgLMgouYWVsZi5IYXNoEjYKEmFjdHVhbF9t",
            "aW5pbmdfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "JAocc3VwcG9zZWRfb3JkZXJfb2ZfbmV4dF9yb3VuZBgHIAEoERJLChZ0dW5l",
            "X29yZGVyX2luZm9ybWF0aW9uGAggAygLMisuVXBkYXRlVmFsdWVJbnB1dC5U",
            "dW5lT3JkZXJJbmZvcm1hdGlvbkVudHJ5EkUKE2VuY3J5cHRlZF9pbl92YWx1",
            "ZXMYCSADKAsyKC5VcGRhdGVWYWx1ZUlucHV0LkVuY3J5cHRlZEluVmFsdWVz",
            "RW50cnkSVgocZGVjcnlwdGVkX3ByZXZpb3VzX2luX3ZhbHVlcxgKIAMoCzIw",
            "LlVwZGF0ZVZhbHVlSW5wdXQuRGVjcnlwdGVkUHJldmlvdXNJblZhbHVlc0Vu",
            "dHJ5EhcKD3Byb2R1Y2VkX2Jsb2NrcxgLIAEoEhJQChltaW5lcnNfcHJldmlv",
            "dXNfaW5fdmFsdWVzGAwgAygLMi0uVXBkYXRlVmFsdWVJbnB1dC5NaW5lcnNQ",
            "cmV2aW91c0luVmFsdWVzRW50cnkSKQohaW1wbGllZF9pcnJldmVyc2libGVf",
            "YmxvY2tfaGVpZ2h0GA0gASgSGjsKGVR1bmVPcmRlckluZm9ybWF0aW9uRW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgFOgI4ARo4ChZFbmNyeXB0",
            "ZWRJblZhbHVlc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoDDoC",
            "OAEaQAoeRGVjcnlwdGVkUHJldmlvdXNJblZhbHVlc0VudHJ5EgsKA2tleRgB",
            "IAEoCRINCgV2YWx1ZRgCIAEoDDoCOAEaSQobTWluZXJzUHJldmlvdXNJblZh",
            "bHVlc0VudHJ5EgsKA2tleRgBIAEoCRIZCgV2YWx1ZRgCIAEoCzIKLmFlbGYu",
            "SGFzaDoCOAEiHAoJTWluZXJMaXN0Eg8KB3B1YmtleXMYASADKAwiZwoQVGVy",
            "bU51bWJlckxvb2tVcBInCgNtYXAYASADKAsyGi5UZXJtTnVtYmVyTG9va1Vw",
            "Lk1hcEVudHJ5GioKCE1hcEVudHJ5EgsKA2tleRgBIAEoEhINCgV2YWx1ZRgC",
            "IAEoEjoCOAEiHQoKQ2FuZGlkYXRlcxIPCgdwdWJrZXlzGAEgAygMIsQDCgVS",
            "b3VuZBIUCgxyb3VuZF9udW1iZXIYASABKBISSwoccmVhbF90aW1lX21pbmVy",
            "c19pbmZvcm1hdGlvbhgCIAMoCzIlLlJvdW5kLlJlYWxUaW1lTWluZXJzSW5m",
            "b3JtYXRpb25FbnRyeRImCh5tYWluX2NoYWluX21pbmVyc19yb3VuZF9udW1i",
            "ZXIYAyABKBISFgoOYmxvY2tjaGFpbl9hZ2UYBCABKBISLgomZXh0cmFfYmxv",
            "Y2tfcHJvZHVjZXJfb2ZfcHJldmlvdXNfcm91bmQYByABKAkSEwoLdGVybV9u",
            "dW1iZXIYCCABKBISKwojY29uZmlybWVkX2lycmV2ZXJzaWJsZV9ibG9ja19o",
            "ZWlnaHQYCSABKBISMQopY29uZmlybWVkX2lycmV2ZXJzaWJsZV9ibG9ja19y",
            "b3VuZF9udW1iZXIYCiABKBISIgoaaXNfbWluZXJfbGlzdF9qdXN0X2NoYW5n",
            "ZWQYCyABKAgaTwoeUmVhbFRpbWVNaW5lcnNJbmZvcm1hdGlvbkVudHJ5EgsK",
            "A2tleRgBIAEoCRIcCgV2YWx1ZRgCIAEoCzINLk1pbmVySW5Sb3VuZDoCOAEi",
            "nAYKDE1pbmVySW5Sb3VuZBINCgVvcmRlchgBIAEoERIfChdpc19leHRyYV9i",
            "bG9ja19wcm9kdWNlchgCIAEoCBIcCghpbl92YWx1ZRgDIAEoCzIKLmFlbGYu",
            "SGFzaBIdCglvdXRfdmFsdWUYBCABKAsyCi5hZWxmLkhhc2gSHQoJc2lnbmF0",
            "dXJlGAUgASgLMgouYWVsZi5IYXNoEjgKFGV4cGVjdGVkX21pbmluZ190aW1l",
            "GAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIXCg9wcm9kdWNl",
            "ZF9ibG9ja3MYByABKBISGQoRbWlzc2VkX3RpbWVfc2xvdHMYCCABKBISDgoG",
            "cHVia2V5GAkgASgJEiUKEXByZXZpb3VzX2luX3ZhbHVlGAwgASgLMgouYWVs",
            "Zi5IYXNoEiQKHHN1cHBvc2VkX29yZGVyX29mX25leHRfcm91bmQYDSABKBES",
            "IQoZZmluYWxfb3JkZXJfb2ZfbmV4dF9yb3VuZBgOIAEoERI3ChNhY3R1YWxf",
            "bWluaW5nX3RpbWVzGA8gAygLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBJBChNlbmNyeXB0ZWRfaW5fdmFsdWVzGBAgAygLMiQuTWluZXJJblJvdW5k",
            "LkVuY3J5cHRlZEluVmFsdWVzRW50cnkSUQobZGVjcnlwdGVkX3ByZXZpb3Vz",
            "X2luVmFsdWVzGBEgAygLMiwuTWluZXJJblJvdW5kLkRlY3J5cHRlZFByZXZp",
            "b3VzSW5WYWx1ZXNFbnRyeRIcChRwcm9kdWNlZF90aW55X2Jsb2NrcxgSIAEo",
            "ERIpCiFpbXBsaWVkX2lycmV2ZXJzaWJsZV9ibG9ja19oZWlnaHQYEyABKBIa",
            "OAoWRW5jcnlwdGVkSW5WYWx1ZXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFs",
            "dWUYAiABKAw6AjgBGkAKHkRlY3J5cHRlZFByZXZpb3VzSW5WYWx1ZXNFbnRy",
            "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAw6AjgBInoKHkFFbGZDb25z",
            "ZW5zdXNIZWFkZXJJbmZvcm1hdGlvbhIVCg1zZW5kZXJfcHVia2V5GAEgASgM",
            "EhUKBXJvdW5kGAIgASgLMgYuUm91bmQSKgoJYmVoYXZpb3VyGAMgASgOMhcu",
            "QUVsZkNvbnNlbnN1c0JlaGF2aW91ciI/ChFBRWxmQ29uc2Vuc3VzSGludBIq",
            "CgliZWhhdmlvdXIYASABKA4yFy5BRWxmQ29uc2Vuc3VzQmVoYXZpb3VyIqgB",
            "Ch9BRWxmQ29uc2Vuc3VzVHJpZ2dlckluZm9ybWF0aW9uEg4KBnB1YmtleRgB",
            "IAEoDBIfCgtyYW5kb21faGFzaBgCIAEoCzIKLmFlbGYuSGFzaBIoChRwcmV2",
            "aW91c19yYW5kb21faGFzaBgDIAEoCzIKLmFlbGYuSGFzaBIqCgliZWhhdmlv",
            "dXIYBCABKA4yFy5BRWxmQ29uc2Vuc3VzQmVoYXZpb3VyIjUKCFRlcm1JbmZv",
            "EhMKC3Rlcm1fbnVtYmVyGAEgASgSEhQKDHJvdW5kX251bWJlchgCIAEoEiJQ",
            "ChhNaW5lckxpc3RXaXRoUm91bmROdW1iZXISHgoKbWluZXJfbGlzdBgBIAEo",
            "CzIKLk1pbmVyTGlzdBIUCgxyb3VuZF9udW1iZXIYAiABKBIicwoOVGlueUJs",
            "b2NrSW5wdXQSEAoIcm91bmRfaWQYASABKBISNgoSYWN0dWFsX21pbmluZ190",
            "aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIXCg9wcm9k",
            "dWNlZF9ibG9ja3MYAyABKBIiPAoUVm90ZU1pbmVyc0NvdW50SW5wdXQSFAoM",
            "bWluZXJzX2NvdW50GAEgASgREg4KBmFtb3VudBgCIAEoEiIlChRDb25zZW5z",
            "dXNJbmZvcm1hdGlvbhINCgV2YWx1ZRgBIAEoDCIoChFHZXRNaW5lckxpc3RJ",
            "bnB1dBITCgt0ZXJtX251bWJlchgBIAEoEiJrCh5SYW5kb21OdW1iZXJSZXF1",
            "ZXN0SW5mb3JtYXRpb24SGwoTdGFyZ2V0X3JvdW5kX251bWJlchgBIAEoEhIN",
            "CgVvcmRlchgCIAEoEhIdChVleHBlY3RlZF9ibG9ja19oZWlnaHQYAyABKBIi",
            "JgoISGFzaExpc3QSGgoGdmFsdWVzGAEgAygLMgouYWVsZi5IYXNoIkcKH0xh",
            "dGVzdFByb3ZpZGVyVG9UaW55QmxvY2tzQ291bnQSDgoGcHVia2V5GAEgASgJ",
            "EhQKDGJsb2Nrc19jb3VudBgCIAEoEiJBChZJcnJldmVyc2libGVCbG9ja0Zv",
            "dW5kEiEKGWlycmV2ZXJzaWJsZV9ibG9ja19oZWlnaHQYASABKBI6BKC7GAEi",
            "WgojSXJyZXZlcnNpYmxlQmxvY2tIZWlnaHRVbmFjY2VwdGFibGUSLQolZGlz",
            "dGFuY2VfdG9faXJyZXZlcnNpYmxlX2Jsb2NrX2hlaWdodBgBIAEoEjoEoLsY",
            "ASqSAQoWQUVsZkNvbnNlbnN1c0JlaGF2aW91chIQCgxVUERBVEVfVkFMVUUQ",
            "ABIOCgpORVhUX1JPVU5EEAESDQoJTkVYVF9URVJNEAISKgomVVBEQVRFX1ZB",
            "TFVFX1dJVEhPVVRfUFJFVklPVVNfSU5fVkFMVUUQAxILCgdOT1RISU5HEAQS",
            "DgoKVElOWV9CTE9DSxAFMpYNCg5BRURQb1NDb250cmFjdBJcChxJbml0aWFs",
            "QUVsZkNvbnNlbnN1c0NvbnRyYWN0EiIuSW5pdGlhbEFFbGZDb25zZW5zdXND",
            "b250cmFjdElucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASLgoKRmly",
            "c3RSb3VuZBIGLlJvdW5kGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASOgoL",
            "VXBkYXRlVmFsdWUSES5VcGRhdGVWYWx1ZUlucHV0GhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5IgASLQoJTmV4dFJvdW5kEgYuUm91bmQaFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkiABIsCghOZXh0VGVybRIGLlJvdW5kGhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASRwoaVXBkYXRlVGlueUJsb2NrSW5mb3JtYXRpb24S",
            "Dy5UaW55QmxvY2tJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEk0K",
            "GlVwZGF0ZUNvbnNlbnN1c0luZm9ybWF0aW9uEhUuQ29uc2Vuc3VzSW5mb3Jt",
            "YXRpb24aFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJEChVTZXRNYXhpbXVt",
            "TWluZXJzQ291bnQSES5hZWxmLlNJbnQzMlZhbHVlGhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5IgASRAoVR2V0TWF4aW11bUJsb2Nrc0NvdW50EhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5GhEuYWVsZi5TSW50MzJWYWx1ZSIAEkAKE0dldEN1",
            "cnJlbnRNaW5lckxpc3QSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaCi5NaW5l",
            "ckxpc3QiBYiJ9wEBEl4KIkdldEN1cnJlbnRNaW5lckxpc3RXaXRoUm91bmRO",
            "dW1iZXISFi5nb29nbGUucHJvdG9idWYuRW1wdHkaGS5NaW5lckxpc3RXaXRo",
            "Um91bmROdW1iZXIiBYiJ9wEBEjcKE0dldFJvdW5kSW5mb3JtYXRpb24SES5h",
            "ZWxmLlNJbnQ2NFZhbHVlGgYuUm91bmQiBYiJ9wEBEkkKFUdldEN1cnJlbnRS",
            "b3VuZE51bWJlchIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoRLmFlbGYuU0lu",
            "dDY0VmFsdWUiBYiJ9wEBEkMKGkdldEN1cnJlbnRSb3VuZEluZm9ybWF0aW9u",
            "EhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GgYuUm91bmQiBYiJ9wEBEkQKG0dl",
            "dFByZXZpb3VzUm91bmRJbmZvcm1hdGlvbhIWLmdvb2dsZS5wcm90b2J1Zi5F",
            "bXB0eRoGLlJvdW5kIgWIifcBARJIChRHZXRDdXJyZW50VGVybU51bWJlchIW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoRLmFlbGYuU0ludDY0VmFsdWUiBYiJ",
            "9wEBEksKF0dldEN1cnJlbnRXZWxmYXJlUmV3YXJkEhYuZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5GhEuYWVsZi5TSW50NjRWYWx1ZSIFiIn3AQESNQoMR2V0TWlu",
            "ZXJMaXN0EhIuR2V0TWluZXJMaXN0SW5wdXQaCi5NaW5lckxpc3QiBYiJ9wEB",
            "EkEKFEdldFByZXZpb3VzTWluZXJMaXN0EhYuZ29vZ2xlLnByb3RvYnVmLkVt",
            "cHR5GgouTWluZXJMaXN0IgWIifcBARJQChxHZXRNaW5lZEJsb2Nrc09mUHJl",
            "dmlvdXNUZXJtEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhEuYWVsZi5TSW50",
            "NjRWYWx1ZSIFiIn3AQESUQoSR2V0TmV4dE1pbmVyUHVia2V5EhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5GhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVl",
            "IgWIifcBARJUChVHZXRDdXJyZW50TWluZXJQdWJrZXkSFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkaHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUiBYiJ",
            "9wEBEkIKDklzQ3VycmVudE1pbmVyEg0uYWVsZi5BZGRyZXNzGhouZ29vZ2xl",
            "LnByb3RvYnVmLkJvb2xWYWx1ZSIFiIn3AQEaOLLM9gEzQUVsZi5Db250cmFj",
            "dHMuQ29uc2Vuc3VzLkFFRFBvUy5BRURQb1NDb250cmFjdFN0YXRlQiKqAh9B",
            "RWxmLkNvbnRyYWN0cy5Db25zZW5zdXMuQUVEUG9TYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.OptionsReflection.Descriptor, global::AElf.Types.CoreReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusBehaviour), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.InitialAElfConsensusContractInput), global::AElf.Contracts.Consensus.AEDPoS.InitialAElfConsensusContractInput.Parser, new[]{ "IsTermStayOne", "IsSideChain", "TimeEachTerm", "MinerIncreaseInterval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.UpdateValueInput), global::AElf.Contracts.Consensus.AEDPoS.UpdateValueInput.Parser, new[]{ "OutValue", "Signature", "RoundId", "PreviousInValue", "ActualMiningTime", "SupposedOrderOfNextRound", "TuneOrderInformation", "EncryptedInValues", "DecryptedPreviousInValues", "ProducedBlocks", "MinersPreviousInValues", "ImpliedIrreversibleBlockHeight" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.MinerList), global::AElf.Contracts.Consensus.AEDPoS.MinerList.Parser, new[]{ "Pubkeys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.TermNumberLookUp), global::AElf.Contracts.Consensus.AEDPoS.TermNumberLookUp.Parser, new[]{ "Map" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.Candidates), global::AElf.Contracts.Consensus.AEDPoS.Candidates.Parser, new[]{ "Pubkeys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.Round), global::AElf.Contracts.Consensus.AEDPoS.Round.Parser, new[]{ "RoundNumber", "RealTimeMinersInformation", "MainChainMinersRoundNumber", "BlockchainAge", "ExtraBlockProducerOfPreviousRound", "TermNumber", "ConfirmedIrreversibleBlockHeight", "ConfirmedIrreversibleBlockRoundNumber", "IsMinerListJustChanged" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.MinerInRound), global::AElf.Contracts.Consensus.AEDPoS.MinerInRound.Parser, new[]{ "Order", "IsExtraBlockProducer", "InValue", "OutValue", "Signature", "ExpectedMiningTime", "ProducedBlocks", "MissedTimeSlots", "Pubkey", "PreviousInValue", "SupposedOrderOfNextRound", "FinalOrderOfNextRound", "ActualMiningTimes", "EncryptedInValues", "DecryptedPreviousInValues", "ProducedTinyBlocks", "ImpliedIrreversibleBlockHeight" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusHeaderInformation), global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusHeaderInformation.Parser, new[]{ "SenderPubkey", "Round", "Behaviour" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusHint), global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusHint.Parser, new[]{ "Behaviour" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusTriggerInformation), global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusTriggerInformation.Parser, new[]{ "Pubkey", "RandomHash", "PreviousRandomHash", "Behaviour" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.TermInfo), global::AElf.Contracts.Consensus.AEDPoS.TermInfo.Parser, new[]{ "TermNumber", "RoundNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.MinerListWithRoundNumber), global::AElf.Contracts.Consensus.AEDPoS.MinerListWithRoundNumber.Parser, new[]{ "MinerList", "RoundNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.TinyBlockInput), global::AElf.Contracts.Consensus.AEDPoS.TinyBlockInput.Parser, new[]{ "RoundId", "ActualMiningTime", "ProducedBlocks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.VoteMinersCountInput), global::AElf.Contracts.Consensus.AEDPoS.VoteMinersCountInput.Parser, new[]{ "MinersCount", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.ConsensusInformation), global::AElf.Contracts.Consensus.AEDPoS.ConsensusInformation.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.GetMinerListInput), global::AElf.Contracts.Consensus.AEDPoS.GetMinerListInput.Parser, new[]{ "TermNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.RandomNumberRequestInformation), global::AElf.Contracts.Consensus.AEDPoS.RandomNumberRequestInformation.Parser, new[]{ "TargetRoundNumber", "Order", "ExpectedBlockHeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.HashList), global::AElf.Contracts.Consensus.AEDPoS.HashList.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.LatestProviderToTinyBlocksCount), global::AElf.Contracts.Consensus.AEDPoS.LatestProviderToTinyBlocksCount.Parser, new[]{ "Pubkey", "BlocksCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.IrreversibleBlockFound), global::AElf.Contracts.Consensus.AEDPoS.IrreversibleBlockFound.Parser, new[]{ "IrreversibleBlockHeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Consensus.AEDPoS.IrreversibleBlockHeightUnacceptable), global::AElf.Contracts.Consensus.AEDPoS.IrreversibleBlockHeightUnacceptable.Parser, new[]{ "DistanceToIrreversibleBlockHeight" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  internal enum AElfConsensusBehaviour {
    [pbr::OriginalName("UPDATE_VALUE")] UpdateValue = 0,
    [pbr::OriginalName("NEXT_ROUND")] NextRound = 1,
    [pbr::OriginalName("NEXT_TERM")] NextTerm = 2,
    [pbr::OriginalName("UPDATE_VALUE_WITHOUT_PREVIOUS_IN_VALUE")] UpdateValueWithoutPreviousInValue = 3,
    [pbr::OriginalName("NOTHING")] Nothing = 4,
    [pbr::OriginalName("TINY_BLOCK")] TinyBlock = 5,
  }

  #endregion

  #region Messages
  internal sealed partial class InitialAElfConsensusContractInput : pb::IMessage<InitialAElfConsensusContractInput> {
    private static readonly pb::MessageParser<InitialAElfConsensusContractInput> _parser = new pb::MessageParser<InitialAElfConsensusContractInput>(() => new InitialAElfConsensusContractInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitialAElfConsensusContractInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialAElfConsensusContractInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialAElfConsensusContractInput(InitialAElfConsensusContractInput other) : this() {
      isTermStayOne_ = other.isTermStayOne_;
      isSideChain_ = other.isSideChain_;
      timeEachTerm_ = other.timeEachTerm_;
      minerIncreaseInterval_ = other.minerIncreaseInterval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialAElfConsensusContractInput Clone() {
      return new InitialAElfConsensusContractInput(this);
    }

    /// <summary>Field number for the "is_term_stay_one" field.</summary>
    public const int IsTermStayOneFieldNumber = 1;
    private bool isTermStayOne_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTermStayOne {
      get { return isTermStayOne_; }
      set {
        isTermStayOne_ = value;
      }
    }

    /// <summary>Field number for the "is_side_chain" field.</summary>
    public const int IsSideChainFieldNumber = 2;
    private bool isSideChain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSideChain {
      get { return isSideChain_; }
      set {
        isSideChain_ = value;
      }
    }

    /// <summary>Field number for the "time_each_term" field.</summary>
    public const int TimeEachTermFieldNumber = 3;
    private long timeEachTerm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeEachTerm {
      get { return timeEachTerm_; }
      set {
        timeEachTerm_ = value;
      }
    }

    /// <summary>Field number for the "miner_increase_interval" field.</summary>
    public const int MinerIncreaseIntervalFieldNumber = 4;
    private long minerIncreaseInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinerIncreaseInterval {
      get { return minerIncreaseInterval_; }
      set {
        minerIncreaseInterval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitialAElfConsensusContractInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitialAElfConsensusContractInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsTermStayOne != other.IsTermStayOne) return false;
      if (IsSideChain != other.IsSideChain) return false;
      if (TimeEachTerm != other.TimeEachTerm) return false;
      if (MinerIncreaseInterval != other.MinerIncreaseInterval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsTermStayOne != false) hash ^= IsTermStayOne.GetHashCode();
      if (IsSideChain != false) hash ^= IsSideChain.GetHashCode();
      if (TimeEachTerm != 0L) hash ^= TimeEachTerm.GetHashCode();
      if (MinerIncreaseInterval != 0L) hash ^= MinerIncreaseInterval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsTermStayOne != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsTermStayOne);
      }
      if (IsSideChain != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsSideChain);
      }
      if (TimeEachTerm != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TimeEachTerm);
      }
      if (MinerIncreaseInterval != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(MinerIncreaseInterval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsTermStayOne != false) {
        size += 1 + 1;
      }
      if (IsSideChain != false) {
        size += 1 + 1;
      }
      if (TimeEachTerm != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TimeEachTerm);
      }
      if (MinerIncreaseInterval != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MinerIncreaseInterval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitialAElfConsensusContractInput other) {
      if (other == null) {
        return;
      }
      if (other.IsTermStayOne != false) {
        IsTermStayOne = other.IsTermStayOne;
      }
      if (other.IsSideChain != false) {
        IsSideChain = other.IsSideChain;
      }
      if (other.TimeEachTerm != 0L) {
        TimeEachTerm = other.TimeEachTerm;
      }
      if (other.MinerIncreaseInterval != 0L) {
        MinerIncreaseInterval = other.MinerIncreaseInterval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsTermStayOne = input.ReadBool();
            break;
          }
          case 16: {
            IsSideChain = input.ReadBool();
            break;
          }
          case 24: {
            TimeEachTerm = input.ReadSInt64();
            break;
          }
          case 32: {
            MinerIncreaseInterval = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Just used as parameter of consensus contract method.
  /// </summary>
  internal sealed partial class UpdateValueInput : pb::IMessage<UpdateValueInput> {
    private static readonly pb::MessageParser<UpdateValueInput> _parser = new pb::MessageParser<UpdateValueInput>(() => new UpdateValueInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateValueInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateValueInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateValueInput(UpdateValueInput other) : this() {
      outValue_ = other.outValue_ != null ? other.outValue_.Clone() : null;
      signature_ = other.signature_ != null ? other.signature_.Clone() : null;
      roundId_ = other.roundId_;
      previousInValue_ = other.previousInValue_ != null ? other.previousInValue_.Clone() : null;
      actualMiningTime_ = other.actualMiningTime_ != null ? other.actualMiningTime_.Clone() : null;
      supposedOrderOfNextRound_ = other.supposedOrderOfNextRound_;
      tuneOrderInformation_ = other.tuneOrderInformation_.Clone();
      encryptedInValues_ = other.encryptedInValues_.Clone();
      decryptedPreviousInValues_ = other.decryptedPreviousInValues_.Clone();
      producedBlocks_ = other.producedBlocks_;
      minersPreviousInValues_ = other.minersPreviousInValues_.Clone();
      impliedIrreversibleBlockHeight_ = other.impliedIrreversibleBlockHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateValueInput Clone() {
      return new UpdateValueInput(this);
    }

    /// <summary>Field number for the "out_value" field.</summary>
    public const int OutValueFieldNumber = 1;
    private global::AElf.Types.Hash outValue_;
    /// <summary>
    /// Calculated from current in value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash OutValue {
      get { return outValue_; }
      set {
        outValue_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private global::AElf.Types.Hash signature_;
    /// <summary>
    /// Calculated from current in value and signatures of previous round.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Signature {
      get { return signature_; }
      set {
        signature_ = value;
      }
    }

    /// <summary>Field number for the "round_id" field.</summary>
    public const int RoundIdFieldNumber = 3;
    private long roundId_;
    /// <summary>
    /// To ensure the values to update will be apply to correct round by comparing round id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "previous_in_value" field.</summary>
    public const int PreviousInValueFieldNumber = 5;
    private global::AElf.Types.Hash previousInValue_;
    /// <summary>
    /// Publish previous in value for validation previous signature and previous out value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash PreviousInValue {
      get { return previousInValue_; }
      set {
        previousInValue_ = value;
      }
    }

    /// <summary>Field number for the "actual_mining_time" field.</summary>
    public const int ActualMiningTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp actualMiningTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ActualMiningTime {
      get { return actualMiningTime_; }
      set {
        actualMiningTime_ = value;
      }
    }

    /// <summary>Field number for the "supposed_order_of_next_round" field.</summary>
    public const int SupposedOrderOfNextRoundFieldNumber = 7;
    private int supposedOrderOfNextRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SupposedOrderOfNextRound {
      get { return supposedOrderOfNextRound_; }
      set {
        supposedOrderOfNextRound_ = value;
      }
    }

    /// <summary>Field number for the "tune_order_information" field.</summary>
    public const int TuneOrderInformationFieldNumber = 8;
    private static readonly pbc::MapField<string, int>.Codec _map_tuneOrderInformation_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 66);
    private readonly pbc::MapField<string, int> tuneOrderInformation_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> TuneOrderInformation {
      get { return tuneOrderInformation_; }
    }

    /// <summary>Field number for the "encrypted_in_values" field.</summary>
    public const int EncryptedInValuesFieldNumber = 9;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_encryptedInValues_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 74);
    private readonly pbc::MapField<string, pb::ByteString> encryptedInValues_ = new pbc::MapField<string, pb::ByteString>();
    /// <summary>
    /// For others to recover his in value of current round.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> EncryptedInValues {
      get { return encryptedInValues_; }
    }

    /// <summary>Field number for the "decrypted_previous_in_values" field.</summary>
    public const int DecryptedPreviousInValuesFieldNumber = 10;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_decryptedPreviousInValues_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 82);
    private readonly pbc::MapField<string, pb::ByteString> decryptedPreviousInValues_ = new pbc::MapField<string, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> DecryptedPreviousInValues {
      get { return decryptedPreviousInValues_; }
    }

    /// <summary>Field number for the "produced_blocks" field.</summary>
    public const int ProducedBlocksFieldNumber = 11;
    private long producedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProducedBlocks {
      get { return producedBlocks_; }
      set {
        producedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "miners_previous_in_values" field.</summary>
    public const int MinersPreviousInValuesFieldNumber = 12;
    private static readonly pbc::MapField<string, global::AElf.Types.Hash>.Codec _map_minersPreviousInValues_codec
        = new pbc::MapField<string, global::AElf.Types.Hash>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::AElf.Types.Hash.Parser), 98);
    private readonly pbc::MapField<string, global::AElf.Types.Hash> minersPreviousInValues_ = new pbc::MapField<string, global::AElf.Types.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::AElf.Types.Hash> MinersPreviousInValues {
      get { return minersPreviousInValues_; }
    }

    /// <summary>Field number for the "implied_irreversible_block_height" field.</summary>
    public const int ImpliedIrreversibleBlockHeightFieldNumber = 13;
    private long impliedIrreversibleBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ImpliedIrreversibleBlockHeight {
      get { return impliedIrreversibleBlockHeight_; }
      set {
        impliedIrreversibleBlockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateValueInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateValueInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OutValue, other.OutValue)) return false;
      if (!object.Equals(Signature, other.Signature)) return false;
      if (RoundId != other.RoundId) return false;
      if (!object.Equals(PreviousInValue, other.PreviousInValue)) return false;
      if (!object.Equals(ActualMiningTime, other.ActualMiningTime)) return false;
      if (SupposedOrderOfNextRound != other.SupposedOrderOfNextRound) return false;
      if (!TuneOrderInformation.Equals(other.TuneOrderInformation)) return false;
      if (!EncryptedInValues.Equals(other.EncryptedInValues)) return false;
      if (!DecryptedPreviousInValues.Equals(other.DecryptedPreviousInValues)) return false;
      if (ProducedBlocks != other.ProducedBlocks) return false;
      if (!MinersPreviousInValues.Equals(other.MinersPreviousInValues)) return false;
      if (ImpliedIrreversibleBlockHeight != other.ImpliedIrreversibleBlockHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (outValue_ != null) hash ^= OutValue.GetHashCode();
      if (signature_ != null) hash ^= Signature.GetHashCode();
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (previousInValue_ != null) hash ^= PreviousInValue.GetHashCode();
      if (actualMiningTime_ != null) hash ^= ActualMiningTime.GetHashCode();
      if (SupposedOrderOfNextRound != 0) hash ^= SupposedOrderOfNextRound.GetHashCode();
      hash ^= TuneOrderInformation.GetHashCode();
      hash ^= EncryptedInValues.GetHashCode();
      hash ^= DecryptedPreviousInValues.GetHashCode();
      if (ProducedBlocks != 0L) hash ^= ProducedBlocks.GetHashCode();
      hash ^= MinersPreviousInValues.GetHashCode();
      if (ImpliedIrreversibleBlockHeight != 0L) hash ^= ImpliedIrreversibleBlockHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (outValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OutValue);
      }
      if (signature_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Signature);
      }
      if (RoundId != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(RoundId);
      }
      if (previousInValue_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PreviousInValue);
      }
      if (actualMiningTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ActualMiningTime);
      }
      if (SupposedOrderOfNextRound != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(SupposedOrderOfNextRound);
      }
      tuneOrderInformation_.WriteTo(output, _map_tuneOrderInformation_codec);
      encryptedInValues_.WriteTo(output, _map_encryptedInValues_codec);
      decryptedPreviousInValues_.WriteTo(output, _map_decryptedPreviousInValues_codec);
      if (ProducedBlocks != 0L) {
        output.WriteRawTag(88);
        output.WriteSInt64(ProducedBlocks);
      }
      minersPreviousInValues_.WriteTo(output, _map_minersPreviousInValues_codec);
      if (ImpliedIrreversibleBlockHeight != 0L) {
        output.WriteRawTag(104);
        output.WriteSInt64(ImpliedIrreversibleBlockHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (outValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutValue);
      }
      if (signature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signature);
      }
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(RoundId);
      }
      if (previousInValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousInValue);
      }
      if (actualMiningTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActualMiningTime);
      }
      if (SupposedOrderOfNextRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SupposedOrderOfNextRound);
      }
      size += tuneOrderInformation_.CalculateSize(_map_tuneOrderInformation_codec);
      size += encryptedInValues_.CalculateSize(_map_encryptedInValues_codec);
      size += decryptedPreviousInValues_.CalculateSize(_map_decryptedPreviousInValues_codec);
      if (ProducedBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ProducedBlocks);
      }
      size += minersPreviousInValues_.CalculateSize(_map_minersPreviousInValues_codec);
      if (ImpliedIrreversibleBlockHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ImpliedIrreversibleBlockHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateValueInput other) {
      if (other == null) {
        return;
      }
      if (other.outValue_ != null) {
        if (outValue_ == null) {
          OutValue = new global::AElf.Types.Hash();
        }
        OutValue.MergeFrom(other.OutValue);
      }
      if (other.signature_ != null) {
        if (signature_ == null) {
          Signature = new global::AElf.Types.Hash();
        }
        Signature.MergeFrom(other.Signature);
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      if (other.previousInValue_ != null) {
        if (previousInValue_ == null) {
          PreviousInValue = new global::AElf.Types.Hash();
        }
        PreviousInValue.MergeFrom(other.PreviousInValue);
      }
      if (other.actualMiningTime_ != null) {
        if (actualMiningTime_ == null) {
          ActualMiningTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ActualMiningTime.MergeFrom(other.ActualMiningTime);
      }
      if (other.SupposedOrderOfNextRound != 0) {
        SupposedOrderOfNextRound = other.SupposedOrderOfNextRound;
      }
      tuneOrderInformation_.Add(other.tuneOrderInformation_);
      encryptedInValues_.Add(other.encryptedInValues_);
      decryptedPreviousInValues_.Add(other.decryptedPreviousInValues_);
      if (other.ProducedBlocks != 0L) {
        ProducedBlocks = other.ProducedBlocks;
      }
      minersPreviousInValues_.Add(other.minersPreviousInValues_);
      if (other.ImpliedIrreversibleBlockHeight != 0L) {
        ImpliedIrreversibleBlockHeight = other.ImpliedIrreversibleBlockHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (outValue_ == null) {
              OutValue = new global::AElf.Types.Hash();
            }
            input.ReadMessage(OutValue);
            break;
          }
          case 18: {
            if (signature_ == null) {
              Signature = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Signature);
            break;
          }
          case 24: {
            RoundId = input.ReadSInt64();
            break;
          }
          case 42: {
            if (previousInValue_ == null) {
              PreviousInValue = new global::AElf.Types.Hash();
            }
            input.ReadMessage(PreviousInValue);
            break;
          }
          case 50: {
            if (actualMiningTime_ == null) {
              ActualMiningTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ActualMiningTime);
            break;
          }
          case 56: {
            SupposedOrderOfNextRound = input.ReadSInt32();
            break;
          }
          case 66: {
            tuneOrderInformation_.AddEntriesFrom(input, _map_tuneOrderInformation_codec);
            break;
          }
          case 74: {
            encryptedInValues_.AddEntriesFrom(input, _map_encryptedInValues_codec);
            break;
          }
          case 82: {
            decryptedPreviousInValues_.AddEntriesFrom(input, _map_decryptedPreviousInValues_codec);
            break;
          }
          case 88: {
            ProducedBlocks = input.ReadSInt64();
            break;
          }
          case 98: {
            minersPreviousInValues_.AddEntriesFrom(input, _map_minersPreviousInValues_codec);
            break;
          }
          case 104: {
            ImpliedIrreversibleBlockHeight = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The miners public key list for each term.
  /// </summary>
  internal sealed partial class MinerList : pb::IMessage<MinerList> {
    private static readonly pb::MessageParser<MinerList> _parser = new pb::MessageParser<MinerList>(() => new MinerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MinerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerList(MinerList other) : this() {
      pubkeys_ = other.pubkeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerList Clone() {
      return new MinerList(this);
    }

    /// <summary>Field number for the "pubkeys" field.</summary>
    public const int PubkeysFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_pubkeys_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> pubkeys_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Pubkeys {
      get { return pubkeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MinerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MinerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pubkeys_.Equals(other.pubkeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pubkeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pubkeys_.WriteTo(output, _repeated_pubkeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pubkeys_.CalculateSize(_repeated_pubkeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MinerList other) {
      if (other == null) {
        return;
      }
      pubkeys_.Add(other.pubkeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pubkeys_.AddEntriesFrom(input, _repeated_pubkeys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// To query first round number of each term.
  /// </summary>
  internal sealed partial class TermNumberLookUp : pb::IMessage<TermNumberLookUp> {
    private static readonly pb::MessageParser<TermNumberLookUp> _parser = new pb::MessageParser<TermNumberLookUp>(() => new TermNumberLookUp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TermNumberLookUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermNumberLookUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermNumberLookUp(TermNumberLookUp other) : this() {
      map_ = other.map_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermNumberLookUp Clone() {
      return new TermNumberLookUp(this);
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 1;
    private static readonly pbc::MapField<long, long>.Codec _map_map_codec
        = new pbc::MapField<long, long>.Codec(pb::FieldCodec.ForSInt64(8), pb::FieldCodec.ForSInt64(16), 10);
    private readonly pbc::MapField<long, long> map_ = new pbc::MapField<long, long>();
    /// <summary>
    /// Term number -> Round number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, long> Map {
      get { return map_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TermNumberLookUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TermNumberLookUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Map.Equals(other.Map)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Map.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      map_.WriteTo(output, _map_map_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += map_.CalculateSize(_map_map_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TermNumberLookUp other) {
      if (other == null) {
        return;
      }
      map_.Add(other.map_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            map_.AddEntriesFrom(input, _map_map_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// All the candidates.
  /// </summary>
  internal sealed partial class Candidates : pb::IMessage<Candidates> {
    private static readonly pb::MessageParser<Candidates> _parser = new pb::MessageParser<Candidates>(() => new Candidates());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Candidates> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Candidates() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Candidates(Candidates other) : this() {
      pubkeys_ = other.pubkeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Candidates Clone() {
      return new Candidates(this);
    }

    /// <summary>Field number for the "pubkeys" field.</summary>
    public const int PubkeysFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_pubkeys_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> pubkeys_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Pubkeys {
      get { return pubkeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Candidates);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Candidates other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pubkeys_.Equals(other.pubkeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pubkeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pubkeys_.WriteTo(output, _repeated_pubkeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pubkeys_.CalculateSize(_repeated_pubkeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Candidates other) {
      if (other == null) {
        return;
      }
      pubkeys_.Add(other.pubkeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pubkeys_.AddEntriesFrom(input, _repeated_pubkeys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The information of a round.
  /// </summary>
  internal sealed partial class Round : pb::IMessage<Round> {
    private static readonly pb::MessageParser<Round> _parser = new pb::MessageParser<Round>(() => new Round());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Round> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round(Round other) : this() {
      roundNumber_ = other.roundNumber_;
      realTimeMinersInformation_ = other.realTimeMinersInformation_.Clone();
      mainChainMinersRoundNumber_ = other.mainChainMinersRoundNumber_;
      blockchainAge_ = other.blockchainAge_;
      extraBlockProducerOfPreviousRound_ = other.extraBlockProducerOfPreviousRound_;
      termNumber_ = other.termNumber_;
      confirmedIrreversibleBlockHeight_ = other.confirmedIrreversibleBlockHeight_;
      confirmedIrreversibleBlockRoundNumber_ = other.confirmedIrreversibleBlockRoundNumber_;
      isMinerListJustChanged_ = other.isMinerListJustChanged_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round Clone() {
      return new Round(this);
    }

    /// <summary>Field number for the "round_number" field.</summary>
    public const int RoundNumberFieldNumber = 1;
    private long roundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundNumber {
      get { return roundNumber_; }
      set {
        roundNumber_ = value;
      }
    }

    /// <summary>Field number for the "real_time_miners_information" field.</summary>
    public const int RealTimeMinersInformationFieldNumber = 2;
    private static readonly pbc::MapField<string, global::AElf.Contracts.Consensus.AEDPoS.MinerInRound>.Codec _map_realTimeMinersInformation_codec
        = new pbc::MapField<string, global::AElf.Contracts.Consensus.AEDPoS.MinerInRound>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::AElf.Contracts.Consensus.AEDPoS.MinerInRound.Parser), 18);
    private readonly pbc::MapField<string, global::AElf.Contracts.Consensus.AEDPoS.MinerInRound> realTimeMinersInformation_ = new pbc::MapField<string, global::AElf.Contracts.Consensus.AEDPoS.MinerInRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::AElf.Contracts.Consensus.AEDPoS.MinerInRound> RealTimeMinersInformation {
      get { return realTimeMinersInformation_; }
    }

    /// <summary>Field number for the "main_chain_miners_round_number" field.</summary>
    public const int MainChainMinersRoundNumberFieldNumber = 3;
    private long mainChainMinersRoundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MainChainMinersRoundNumber {
      get { return mainChainMinersRoundNumber_; }
      set {
        mainChainMinersRoundNumber_ = value;
      }
    }

    /// <summary>Field number for the "blockchain_age" field.</summary>
    public const int BlockchainAgeFieldNumber = 4;
    private long blockchainAge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockchainAge {
      get { return blockchainAge_; }
      set {
        blockchainAge_ = value;
      }
    }

    /// <summary>Field number for the "extra_block_producer_of_previous_round" field.</summary>
    public const int ExtraBlockProducerOfPreviousRoundFieldNumber = 7;
    private string extraBlockProducerOfPreviousRound_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraBlockProducerOfPreviousRound {
      get { return extraBlockProducerOfPreviousRound_; }
      set {
        extraBlockProducerOfPreviousRound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 8;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "confirmed_irreversible_block_height" field.</summary>
    public const int ConfirmedIrreversibleBlockHeightFieldNumber = 9;
    private long confirmedIrreversibleBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConfirmedIrreversibleBlockHeight {
      get { return confirmedIrreversibleBlockHeight_; }
      set {
        confirmedIrreversibleBlockHeight_ = value;
      }
    }

    /// <summary>Field number for the "confirmed_irreversible_block_round_number" field.</summary>
    public const int ConfirmedIrreversibleBlockRoundNumberFieldNumber = 10;
    private long confirmedIrreversibleBlockRoundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConfirmedIrreversibleBlockRoundNumber {
      get { return confirmedIrreversibleBlockRoundNumber_; }
      set {
        confirmedIrreversibleBlockRoundNumber_ = value;
      }
    }

    /// <summary>Field number for the "is_miner_list_just_changed" field.</summary>
    public const int IsMinerListJustChangedFieldNumber = 11;
    private bool isMinerListJustChanged_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMinerListJustChanged {
      get { return isMinerListJustChanged_; }
      set {
        isMinerListJustChanged_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Round);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Round other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoundNumber != other.RoundNumber) return false;
      if (!RealTimeMinersInformation.Equals(other.RealTimeMinersInformation)) return false;
      if (MainChainMinersRoundNumber != other.MainChainMinersRoundNumber) return false;
      if (BlockchainAge != other.BlockchainAge) return false;
      if (ExtraBlockProducerOfPreviousRound != other.ExtraBlockProducerOfPreviousRound) return false;
      if (TermNumber != other.TermNumber) return false;
      if (ConfirmedIrreversibleBlockHeight != other.ConfirmedIrreversibleBlockHeight) return false;
      if (ConfirmedIrreversibleBlockRoundNumber != other.ConfirmedIrreversibleBlockRoundNumber) return false;
      if (IsMinerListJustChanged != other.IsMinerListJustChanged) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoundNumber != 0L) hash ^= RoundNumber.GetHashCode();
      hash ^= RealTimeMinersInformation.GetHashCode();
      if (MainChainMinersRoundNumber != 0L) hash ^= MainChainMinersRoundNumber.GetHashCode();
      if (BlockchainAge != 0L) hash ^= BlockchainAge.GetHashCode();
      if (ExtraBlockProducerOfPreviousRound.Length != 0) hash ^= ExtraBlockProducerOfPreviousRound.GetHashCode();
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (ConfirmedIrreversibleBlockHeight != 0L) hash ^= ConfirmedIrreversibleBlockHeight.GetHashCode();
      if (ConfirmedIrreversibleBlockRoundNumber != 0L) hash ^= ConfirmedIrreversibleBlockRoundNumber.GetHashCode();
      if (IsMinerListJustChanged != false) hash ^= IsMinerListJustChanged.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(RoundNumber);
      }
      realTimeMinersInformation_.WriteTo(output, _map_realTimeMinersInformation_codec);
      if (MainChainMinersRoundNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(MainChainMinersRoundNumber);
      }
      if (BlockchainAge != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(BlockchainAge);
      }
      if (ExtraBlockProducerOfPreviousRound.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ExtraBlockProducerOfPreviousRound);
      }
      if (TermNumber != 0L) {
        output.WriteRawTag(64);
        output.WriteSInt64(TermNumber);
      }
      if (ConfirmedIrreversibleBlockHeight != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(ConfirmedIrreversibleBlockHeight);
      }
      if (ConfirmedIrreversibleBlockRoundNumber != 0L) {
        output.WriteRawTag(80);
        output.WriteSInt64(ConfirmedIrreversibleBlockRoundNumber);
      }
      if (IsMinerListJustChanged != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsMinerListJustChanged);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(RoundNumber);
      }
      size += realTimeMinersInformation_.CalculateSize(_map_realTimeMinersInformation_codec);
      if (MainChainMinersRoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MainChainMinersRoundNumber);
      }
      if (BlockchainAge != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BlockchainAge);
      }
      if (ExtraBlockProducerOfPreviousRound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraBlockProducerOfPreviousRound);
      }
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (ConfirmedIrreversibleBlockHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ConfirmedIrreversibleBlockHeight);
      }
      if (ConfirmedIrreversibleBlockRoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ConfirmedIrreversibleBlockRoundNumber);
      }
      if (IsMinerListJustChanged != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Round other) {
      if (other == null) {
        return;
      }
      if (other.RoundNumber != 0L) {
        RoundNumber = other.RoundNumber;
      }
      realTimeMinersInformation_.Add(other.realTimeMinersInformation_);
      if (other.MainChainMinersRoundNumber != 0L) {
        MainChainMinersRoundNumber = other.MainChainMinersRoundNumber;
      }
      if (other.BlockchainAge != 0L) {
        BlockchainAge = other.BlockchainAge;
      }
      if (other.ExtraBlockProducerOfPreviousRound.Length != 0) {
        ExtraBlockProducerOfPreviousRound = other.ExtraBlockProducerOfPreviousRound;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      if (other.ConfirmedIrreversibleBlockHeight != 0L) {
        ConfirmedIrreversibleBlockHeight = other.ConfirmedIrreversibleBlockHeight;
      }
      if (other.ConfirmedIrreversibleBlockRoundNumber != 0L) {
        ConfirmedIrreversibleBlockRoundNumber = other.ConfirmedIrreversibleBlockRoundNumber;
      }
      if (other.IsMinerListJustChanged != false) {
        IsMinerListJustChanged = other.IsMinerListJustChanged;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoundNumber = input.ReadSInt64();
            break;
          }
          case 18: {
            realTimeMinersInformation_.AddEntriesFrom(input, _map_realTimeMinersInformation_codec);
            break;
          }
          case 24: {
            MainChainMinersRoundNumber = input.ReadSInt64();
            break;
          }
          case 32: {
            BlockchainAge = input.ReadSInt64();
            break;
          }
          case 58: {
            ExtraBlockProducerOfPreviousRound = input.ReadString();
            break;
          }
          case 64: {
            TermNumber = input.ReadSInt64();
            break;
          }
          case 72: {
            ConfirmedIrreversibleBlockHeight = input.ReadSInt64();
            break;
          }
          case 80: {
            ConfirmedIrreversibleBlockRoundNumber = input.ReadSInt64();
            break;
          }
          case 88: {
            IsMinerListJustChanged = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The information of a miner in a specific round.
  /// </summary>
  internal sealed partial class MinerInRound : pb::IMessage<MinerInRound> {
    private static readonly pb::MessageParser<MinerInRound> _parser = new pb::MessageParser<MinerInRound>(() => new MinerInRound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MinerInRound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerInRound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerInRound(MinerInRound other) : this() {
      order_ = other.order_;
      isExtraBlockProducer_ = other.isExtraBlockProducer_;
      inValue_ = other.inValue_ != null ? other.inValue_.Clone() : null;
      outValue_ = other.outValue_ != null ? other.outValue_.Clone() : null;
      signature_ = other.signature_ != null ? other.signature_.Clone() : null;
      expectedMiningTime_ = other.expectedMiningTime_ != null ? other.expectedMiningTime_.Clone() : null;
      producedBlocks_ = other.producedBlocks_;
      missedTimeSlots_ = other.missedTimeSlots_;
      pubkey_ = other.pubkey_;
      previousInValue_ = other.previousInValue_ != null ? other.previousInValue_.Clone() : null;
      supposedOrderOfNextRound_ = other.supposedOrderOfNextRound_;
      finalOrderOfNextRound_ = other.finalOrderOfNextRound_;
      actualMiningTimes_ = other.actualMiningTimes_.Clone();
      encryptedInValues_ = other.encryptedInValues_.Clone();
      decryptedPreviousInValues_ = other.decryptedPreviousInValues_.Clone();
      producedTinyBlocks_ = other.producedTinyBlocks_;
      impliedIrreversibleBlockHeight_ = other.impliedIrreversibleBlockHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerInRound Clone() {
      return new MinerInRound(this);
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 1;
    private int order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "is_extra_block_producer" field.</summary>
    public const int IsExtraBlockProducerFieldNumber = 2;
    private bool isExtraBlockProducer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsExtraBlockProducer {
      get { return isExtraBlockProducer_; }
      set {
        isExtraBlockProducer_ = value;
      }
    }

    /// <summary>Field number for the "in_value" field.</summary>
    public const int InValueFieldNumber = 3;
    private global::AElf.Types.Hash inValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash InValue {
      get { return inValue_; }
      set {
        inValue_ = value;
      }
    }

    /// <summary>Field number for the "out_value" field.</summary>
    public const int OutValueFieldNumber = 4;
    private global::AElf.Types.Hash outValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash OutValue {
      get { return outValue_; }
      set {
        outValue_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 5;
    private global::AElf.Types.Hash signature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Signature {
      get { return signature_; }
      set {
        signature_ = value;
      }
    }

    /// <summary>Field number for the "expected_mining_time" field.</summary>
    public const int ExpectedMiningTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expectedMiningTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpectedMiningTime {
      get { return expectedMiningTime_; }
      set {
        expectedMiningTime_ = value;
      }
    }

    /// <summary>Field number for the "produced_blocks" field.</summary>
    public const int ProducedBlocksFieldNumber = 7;
    private long producedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProducedBlocks {
      get { return producedBlocks_; }
      set {
        producedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "missed_time_slots" field.</summary>
    public const int MissedTimeSlotsFieldNumber = 8;
    private long missedTimeSlots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MissedTimeSlots {
      get { return missedTimeSlots_; }
      set {
        missedTimeSlots_ = value;
      }
    }

    /// <summary>Field number for the "pubkey" field.</summary>
    public const int PubkeyFieldNumber = 9;
    private string pubkey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pubkey {
      get { return pubkey_; }
      set {
        pubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "previous_in_value" field.</summary>
    public const int PreviousInValueFieldNumber = 12;
    private global::AElf.Types.Hash previousInValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash PreviousInValue {
      get { return previousInValue_; }
      set {
        previousInValue_ = value;
      }
    }

    /// <summary>Field number for the "supposed_order_of_next_round" field.</summary>
    public const int SupposedOrderOfNextRoundFieldNumber = 13;
    private int supposedOrderOfNextRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SupposedOrderOfNextRound {
      get { return supposedOrderOfNextRound_; }
      set {
        supposedOrderOfNextRound_ = value;
      }
    }

    /// <summary>Field number for the "final_order_of_next_round" field.</summary>
    public const int FinalOrderOfNextRoundFieldNumber = 14;
    private int finalOrderOfNextRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalOrderOfNextRound {
      get { return finalOrderOfNextRound_; }
      set {
        finalOrderOfNextRound_ = value;
      }
    }

    /// <summary>Field number for the "actual_mining_times" field.</summary>
    public const int ActualMiningTimesFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Timestamp> _repeated_actualMiningTimes_codec
        = pb::FieldCodec.ForMessage(122, global::Google.Protobuf.WellKnownTypes.Timestamp.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp> actualMiningTimes_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp>();
    /// <summary>
    /// Miners must fill actual mining time when they do the mining.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Timestamp> ActualMiningTimes {
      get { return actualMiningTimes_; }
    }

    /// <summary>Field number for the "encrypted_in_values" field.</summary>
    public const int EncryptedInValuesFieldNumber = 16;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_encryptedInValues_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 130);
    private readonly pbc::MapField<string, pb::ByteString> encryptedInValues_ = new pbc::MapField<string, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> EncryptedInValues {
      get { return encryptedInValues_; }
    }

    /// <summary>Field number for the "decrypted_previous_inValues" field.</summary>
    public const int DecryptedPreviousInValuesFieldNumber = 17;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_decryptedPreviousInValues_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 138);
    private readonly pbc::MapField<string, pb::ByteString> decryptedPreviousInValues_ = new pbc::MapField<string, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> DecryptedPreviousInValues {
      get { return decryptedPreviousInValues_; }
    }

    /// <summary>Field number for the "produced_tiny_blocks" field.</summary>
    public const int ProducedTinyBlocksFieldNumber = 18;
    private int producedTinyBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProducedTinyBlocks {
      get { return producedTinyBlocks_; }
      set {
        producedTinyBlocks_ = value;
      }
    }

    /// <summary>Field number for the "implied_irreversible_block_height" field.</summary>
    public const int ImpliedIrreversibleBlockHeightFieldNumber = 19;
    private long impliedIrreversibleBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ImpliedIrreversibleBlockHeight {
      get { return impliedIrreversibleBlockHeight_; }
      set {
        impliedIrreversibleBlockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MinerInRound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MinerInRound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Order != other.Order) return false;
      if (IsExtraBlockProducer != other.IsExtraBlockProducer) return false;
      if (!object.Equals(InValue, other.InValue)) return false;
      if (!object.Equals(OutValue, other.OutValue)) return false;
      if (!object.Equals(Signature, other.Signature)) return false;
      if (!object.Equals(ExpectedMiningTime, other.ExpectedMiningTime)) return false;
      if (ProducedBlocks != other.ProducedBlocks) return false;
      if (MissedTimeSlots != other.MissedTimeSlots) return false;
      if (Pubkey != other.Pubkey) return false;
      if (!object.Equals(PreviousInValue, other.PreviousInValue)) return false;
      if (SupposedOrderOfNextRound != other.SupposedOrderOfNextRound) return false;
      if (FinalOrderOfNextRound != other.FinalOrderOfNextRound) return false;
      if(!actualMiningTimes_.Equals(other.actualMiningTimes_)) return false;
      if (!EncryptedInValues.Equals(other.EncryptedInValues)) return false;
      if (!DecryptedPreviousInValues.Equals(other.DecryptedPreviousInValues)) return false;
      if (ProducedTinyBlocks != other.ProducedTinyBlocks) return false;
      if (ImpliedIrreversibleBlockHeight != other.ImpliedIrreversibleBlockHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Order != 0) hash ^= Order.GetHashCode();
      if (IsExtraBlockProducer != false) hash ^= IsExtraBlockProducer.GetHashCode();
      if (inValue_ != null) hash ^= InValue.GetHashCode();
      if (outValue_ != null) hash ^= OutValue.GetHashCode();
      if (signature_ != null) hash ^= Signature.GetHashCode();
      if (expectedMiningTime_ != null) hash ^= ExpectedMiningTime.GetHashCode();
      if (ProducedBlocks != 0L) hash ^= ProducedBlocks.GetHashCode();
      if (MissedTimeSlots != 0L) hash ^= MissedTimeSlots.GetHashCode();
      if (Pubkey.Length != 0) hash ^= Pubkey.GetHashCode();
      if (previousInValue_ != null) hash ^= PreviousInValue.GetHashCode();
      if (SupposedOrderOfNextRound != 0) hash ^= SupposedOrderOfNextRound.GetHashCode();
      if (FinalOrderOfNextRound != 0) hash ^= FinalOrderOfNextRound.GetHashCode();
      hash ^= actualMiningTimes_.GetHashCode();
      hash ^= EncryptedInValues.GetHashCode();
      hash ^= DecryptedPreviousInValues.GetHashCode();
      if (ProducedTinyBlocks != 0) hash ^= ProducedTinyBlocks.GetHashCode();
      if (ImpliedIrreversibleBlockHeight != 0L) hash ^= ImpliedIrreversibleBlockHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Order != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Order);
      }
      if (IsExtraBlockProducer != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsExtraBlockProducer);
      }
      if (inValue_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InValue);
      }
      if (outValue_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(OutValue);
      }
      if (signature_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Signature);
      }
      if (expectedMiningTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ExpectedMiningTime);
      }
      if (ProducedBlocks != 0L) {
        output.WriteRawTag(56);
        output.WriteSInt64(ProducedBlocks);
      }
      if (MissedTimeSlots != 0L) {
        output.WriteRawTag(64);
        output.WriteSInt64(MissedTimeSlots);
      }
      if (Pubkey.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Pubkey);
      }
      if (previousInValue_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PreviousInValue);
      }
      if (SupposedOrderOfNextRound != 0) {
        output.WriteRawTag(104);
        output.WriteSInt32(SupposedOrderOfNextRound);
      }
      if (FinalOrderOfNextRound != 0) {
        output.WriteRawTag(112);
        output.WriteSInt32(FinalOrderOfNextRound);
      }
      actualMiningTimes_.WriteTo(output, _repeated_actualMiningTimes_codec);
      encryptedInValues_.WriteTo(output, _map_encryptedInValues_codec);
      decryptedPreviousInValues_.WriteTo(output, _map_decryptedPreviousInValues_codec);
      if (ProducedTinyBlocks != 0) {
        output.WriteRawTag(144, 1);
        output.WriteSInt32(ProducedTinyBlocks);
      }
      if (ImpliedIrreversibleBlockHeight != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteSInt64(ImpliedIrreversibleBlockHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Order);
      }
      if (IsExtraBlockProducer != false) {
        size += 1 + 1;
      }
      if (inValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InValue);
      }
      if (outValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutValue);
      }
      if (signature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signature);
      }
      if (expectedMiningTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpectedMiningTime);
      }
      if (ProducedBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ProducedBlocks);
      }
      if (MissedTimeSlots != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MissedTimeSlots);
      }
      if (Pubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pubkey);
      }
      if (previousInValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousInValue);
      }
      if (SupposedOrderOfNextRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SupposedOrderOfNextRound);
      }
      if (FinalOrderOfNextRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(FinalOrderOfNextRound);
      }
      size += actualMiningTimes_.CalculateSize(_repeated_actualMiningTimes_codec);
      size += encryptedInValues_.CalculateSize(_map_encryptedInValues_codec);
      size += decryptedPreviousInValues_.CalculateSize(_map_decryptedPreviousInValues_codec);
      if (ProducedTinyBlocks != 0) {
        size += 2 + pb::CodedOutputStream.ComputeSInt32Size(ProducedTinyBlocks);
      }
      if (ImpliedIrreversibleBlockHeight != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeSInt64Size(ImpliedIrreversibleBlockHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MinerInRound other) {
      if (other == null) {
        return;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
      if (other.IsExtraBlockProducer != false) {
        IsExtraBlockProducer = other.IsExtraBlockProducer;
      }
      if (other.inValue_ != null) {
        if (inValue_ == null) {
          InValue = new global::AElf.Types.Hash();
        }
        InValue.MergeFrom(other.InValue);
      }
      if (other.outValue_ != null) {
        if (outValue_ == null) {
          OutValue = new global::AElf.Types.Hash();
        }
        OutValue.MergeFrom(other.OutValue);
      }
      if (other.signature_ != null) {
        if (signature_ == null) {
          Signature = new global::AElf.Types.Hash();
        }
        Signature.MergeFrom(other.Signature);
      }
      if (other.expectedMiningTime_ != null) {
        if (expectedMiningTime_ == null) {
          ExpectedMiningTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpectedMiningTime.MergeFrom(other.ExpectedMiningTime);
      }
      if (other.ProducedBlocks != 0L) {
        ProducedBlocks = other.ProducedBlocks;
      }
      if (other.MissedTimeSlots != 0L) {
        MissedTimeSlots = other.MissedTimeSlots;
      }
      if (other.Pubkey.Length != 0) {
        Pubkey = other.Pubkey;
      }
      if (other.previousInValue_ != null) {
        if (previousInValue_ == null) {
          PreviousInValue = new global::AElf.Types.Hash();
        }
        PreviousInValue.MergeFrom(other.PreviousInValue);
      }
      if (other.SupposedOrderOfNextRound != 0) {
        SupposedOrderOfNextRound = other.SupposedOrderOfNextRound;
      }
      if (other.FinalOrderOfNextRound != 0) {
        FinalOrderOfNextRound = other.FinalOrderOfNextRound;
      }
      actualMiningTimes_.Add(other.actualMiningTimes_);
      encryptedInValues_.Add(other.encryptedInValues_);
      decryptedPreviousInValues_.Add(other.decryptedPreviousInValues_);
      if (other.ProducedTinyBlocks != 0) {
        ProducedTinyBlocks = other.ProducedTinyBlocks;
      }
      if (other.ImpliedIrreversibleBlockHeight != 0L) {
        ImpliedIrreversibleBlockHeight = other.ImpliedIrreversibleBlockHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Order = input.ReadSInt32();
            break;
          }
          case 16: {
            IsExtraBlockProducer = input.ReadBool();
            break;
          }
          case 26: {
            if (inValue_ == null) {
              InValue = new global::AElf.Types.Hash();
            }
            input.ReadMessage(InValue);
            break;
          }
          case 34: {
            if (outValue_ == null) {
              OutValue = new global::AElf.Types.Hash();
            }
            input.ReadMessage(OutValue);
            break;
          }
          case 42: {
            if (signature_ == null) {
              Signature = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Signature);
            break;
          }
          case 50: {
            if (expectedMiningTime_ == null) {
              ExpectedMiningTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpectedMiningTime);
            break;
          }
          case 56: {
            ProducedBlocks = input.ReadSInt64();
            break;
          }
          case 64: {
            MissedTimeSlots = input.ReadSInt64();
            break;
          }
          case 74: {
            Pubkey = input.ReadString();
            break;
          }
          case 98: {
            if (previousInValue_ == null) {
              PreviousInValue = new global::AElf.Types.Hash();
            }
            input.ReadMessage(PreviousInValue);
            break;
          }
          case 104: {
            SupposedOrderOfNextRound = input.ReadSInt32();
            break;
          }
          case 112: {
            FinalOrderOfNextRound = input.ReadSInt32();
            break;
          }
          case 122: {
            actualMiningTimes_.AddEntriesFrom(input, _repeated_actualMiningTimes_codec);
            break;
          }
          case 130: {
            encryptedInValues_.AddEntriesFrom(input, _map_encryptedInValues_codec);
            break;
          }
          case 138: {
            decryptedPreviousInValues_.AddEntriesFrom(input, _map_decryptedPreviousInValues_codec);
            break;
          }
          case 144: {
            ProducedTinyBlocks = input.ReadSInt32();
            break;
          }
          case 152: {
            ImpliedIrreversibleBlockHeight = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AElfConsensusHeaderInformation : pb::IMessage<AElfConsensusHeaderInformation> {
    private static readonly pb::MessageParser<AElfConsensusHeaderInformation> _parser = new pb::MessageParser<AElfConsensusHeaderInformation>(() => new AElfConsensusHeaderInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AElfConsensusHeaderInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AElfConsensusHeaderInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AElfConsensusHeaderInformation(AElfConsensusHeaderInformation other) : this() {
      senderPubkey_ = other.senderPubkey_;
      round_ = other.round_ != null ? other.round_.Clone() : null;
      behaviour_ = other.behaviour_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AElfConsensusHeaderInformation Clone() {
      return new AElfConsensusHeaderInformation(this);
    }

    /// <summary>Field number for the "sender_pubkey" field.</summary>
    public const int SenderPubkeyFieldNumber = 1;
    private pb::ByteString senderPubkey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SenderPubkey {
      get { return senderPubkey_; }
      set {
        senderPubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 2;
    private global::AElf.Contracts.Consensus.AEDPoS.Round round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Consensus.AEDPoS.Round Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "behaviour" field.</summary>
    public const int BehaviourFieldNumber = 3;
    private global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusBehaviour behaviour_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusBehaviour Behaviour {
      get { return behaviour_; }
      set {
        behaviour_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AElfConsensusHeaderInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AElfConsensusHeaderInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderPubkey != other.SenderPubkey) return false;
      if (!object.Equals(Round, other.Round)) return false;
      if (Behaviour != other.Behaviour) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderPubkey.Length != 0) hash ^= SenderPubkey.GetHashCode();
      if (round_ != null) hash ^= Round.GetHashCode();
      if (Behaviour != 0) hash ^= Behaviour.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderPubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SenderPubkey);
      }
      if (round_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Round);
      }
      if (Behaviour != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Behaviour);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderPubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderPubkey);
      }
      if (round_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Round);
      }
      if (Behaviour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Behaviour);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AElfConsensusHeaderInformation other) {
      if (other == null) {
        return;
      }
      if (other.SenderPubkey.Length != 0) {
        SenderPubkey = other.SenderPubkey;
      }
      if (other.round_ != null) {
        if (round_ == null) {
          Round = new global::AElf.Contracts.Consensus.AEDPoS.Round();
        }
        Round.MergeFrom(other.Round);
      }
      if (other.Behaviour != 0) {
        Behaviour = other.Behaviour;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SenderPubkey = input.ReadBytes();
            break;
          }
          case 18: {
            if (round_ == null) {
              Round = new global::AElf.Contracts.Consensus.AEDPoS.Round();
            }
            input.ReadMessage(Round);
            break;
          }
          case 24: {
            Behaviour = (global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusBehaviour) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AElfConsensusHint : pb::IMessage<AElfConsensusHint> {
    private static readonly pb::MessageParser<AElfConsensusHint> _parser = new pb::MessageParser<AElfConsensusHint>(() => new AElfConsensusHint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AElfConsensusHint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AElfConsensusHint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AElfConsensusHint(AElfConsensusHint other) : this() {
      behaviour_ = other.behaviour_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AElfConsensusHint Clone() {
      return new AElfConsensusHint(this);
    }

    /// <summary>Field number for the "behaviour" field.</summary>
    public const int BehaviourFieldNumber = 1;
    private global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusBehaviour behaviour_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusBehaviour Behaviour {
      get { return behaviour_; }
      set {
        behaviour_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AElfConsensusHint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AElfConsensusHint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Behaviour != other.Behaviour) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Behaviour != 0) hash ^= Behaviour.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Behaviour != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Behaviour);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Behaviour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Behaviour);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AElfConsensusHint other) {
      if (other == null) {
        return;
      }
      if (other.Behaviour != 0) {
        Behaviour = other.Behaviour;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Behaviour = (global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusBehaviour) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AElfConsensusTriggerInformation : pb::IMessage<AElfConsensusTriggerInformation> {
    private static readonly pb::MessageParser<AElfConsensusTriggerInformation> _parser = new pb::MessageParser<AElfConsensusTriggerInformation>(() => new AElfConsensusTriggerInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AElfConsensusTriggerInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AElfConsensusTriggerInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AElfConsensusTriggerInformation(AElfConsensusTriggerInformation other) : this() {
      pubkey_ = other.pubkey_;
      randomHash_ = other.randomHash_ != null ? other.randomHash_.Clone() : null;
      previousRandomHash_ = other.previousRandomHash_ != null ? other.previousRandomHash_.Clone() : null;
      behaviour_ = other.behaviour_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AElfConsensusTriggerInformation Clone() {
      return new AElfConsensusTriggerInformation(this);
    }

    /// <summary>Field number for the "pubkey" field.</summary>
    public const int PubkeyFieldNumber = 1;
    private pb::ByteString pubkey_ = pb::ByteString.Empty;
    /// <summary>
    /// A must-have.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Pubkey {
      get { return pubkey_; }
      set {
        pubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "random_hash" field.</summary>
    public const int RandomHashFieldNumber = 2;
    private global::AElf.Types.Hash randomHash_;
    /// <summary>
    /// To calculate In Value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash RandomHash {
      get { return randomHash_; }
      set {
        randomHash_ = value;
      }
    }

    /// <summary>Field number for the "previous_random_hash" field.</summary>
    public const int PreviousRandomHashFieldNumber = 3;
    private global::AElf.Types.Hash previousRandomHash_;
    /// <summary>
    /// Random hash of previous round for validation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash PreviousRandomHash {
      get { return previousRandomHash_; }
      set {
        previousRandomHash_ = value;
      }
    }

    /// <summary>Field number for the "behaviour" field.</summary>
    public const int BehaviourFieldNumber = 4;
    private global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusBehaviour behaviour_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusBehaviour Behaviour {
      get { return behaviour_; }
      set {
        behaviour_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AElfConsensusTriggerInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AElfConsensusTriggerInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pubkey != other.Pubkey) return false;
      if (!object.Equals(RandomHash, other.RandomHash)) return false;
      if (!object.Equals(PreviousRandomHash, other.PreviousRandomHash)) return false;
      if (Behaviour != other.Behaviour) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pubkey.Length != 0) hash ^= Pubkey.GetHashCode();
      if (randomHash_ != null) hash ^= RandomHash.GetHashCode();
      if (previousRandomHash_ != null) hash ^= PreviousRandomHash.GetHashCode();
      if (Behaviour != 0) hash ^= Behaviour.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Pubkey);
      }
      if (randomHash_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RandomHash);
      }
      if (previousRandomHash_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PreviousRandomHash);
      }
      if (Behaviour != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Behaviour);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Pubkey);
      }
      if (randomHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RandomHash);
      }
      if (previousRandomHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousRandomHash);
      }
      if (Behaviour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Behaviour);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AElfConsensusTriggerInformation other) {
      if (other == null) {
        return;
      }
      if (other.Pubkey.Length != 0) {
        Pubkey = other.Pubkey;
      }
      if (other.randomHash_ != null) {
        if (randomHash_ == null) {
          RandomHash = new global::AElf.Types.Hash();
        }
        RandomHash.MergeFrom(other.RandomHash);
      }
      if (other.previousRandomHash_ != null) {
        if (previousRandomHash_ == null) {
          PreviousRandomHash = new global::AElf.Types.Hash();
        }
        PreviousRandomHash.MergeFrom(other.PreviousRandomHash);
      }
      if (other.Behaviour != 0) {
        Behaviour = other.Behaviour;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Pubkey = input.ReadBytes();
            break;
          }
          case 18: {
            if (randomHash_ == null) {
              RandomHash = new global::AElf.Types.Hash();
            }
            input.ReadMessage(RandomHash);
            break;
          }
          case 26: {
            if (previousRandomHash_ == null) {
              PreviousRandomHash = new global::AElf.Types.Hash();
            }
            input.ReadMessage(PreviousRandomHash);
            break;
          }
          case 32: {
            Behaviour = (global::AElf.Contracts.Consensus.AEDPoS.AElfConsensusBehaviour) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TermInfo : pb::IMessage<TermInfo> {
    private static readonly pb::MessageParser<TermInfo> _parser = new pb::MessageParser<TermInfo>(() => new TermInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TermInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermInfo(TermInfo other) : this() {
      termNumber_ = other.termNumber_;
      roundNumber_ = other.roundNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermInfo Clone() {
      return new TermInfo(this);
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "round_number" field.</summary>
    public const int RoundNumberFieldNumber = 2;
    private long roundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundNumber {
      get { return roundNumber_; }
      set {
        roundNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TermInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TermInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      if (RoundNumber != other.RoundNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (RoundNumber != 0L) hash ^= RoundNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (RoundNumber != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(RoundNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (RoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(RoundNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TermInfo other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      if (other.RoundNumber != 0L) {
        RoundNumber = other.RoundNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
          case 16: {
            RoundNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class MinerListWithRoundNumber : pb::IMessage<MinerListWithRoundNumber> {
    private static readonly pb::MessageParser<MinerListWithRoundNumber> _parser = new pb::MessageParser<MinerListWithRoundNumber>(() => new MinerListWithRoundNumber());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MinerListWithRoundNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerListWithRoundNumber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerListWithRoundNumber(MinerListWithRoundNumber other) : this() {
      minerList_ = other.minerList_ != null ? other.minerList_.Clone() : null;
      roundNumber_ = other.roundNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerListWithRoundNumber Clone() {
      return new MinerListWithRoundNumber(this);
    }

    /// <summary>Field number for the "miner_list" field.</summary>
    public const int MinerListFieldNumber = 1;
    private global::AElf.Contracts.Consensus.AEDPoS.MinerList minerList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Consensus.AEDPoS.MinerList MinerList {
      get { return minerList_; }
      set {
        minerList_ = value;
      }
    }

    /// <summary>Field number for the "round_number" field.</summary>
    public const int RoundNumberFieldNumber = 2;
    private long roundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundNumber {
      get { return roundNumber_; }
      set {
        roundNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MinerListWithRoundNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MinerListWithRoundNumber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MinerList, other.MinerList)) return false;
      if (RoundNumber != other.RoundNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (minerList_ != null) hash ^= MinerList.GetHashCode();
      if (RoundNumber != 0L) hash ^= RoundNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (minerList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MinerList);
      }
      if (RoundNumber != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(RoundNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (minerList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinerList);
      }
      if (RoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(RoundNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MinerListWithRoundNumber other) {
      if (other == null) {
        return;
      }
      if (other.minerList_ != null) {
        if (minerList_ == null) {
          MinerList = new global::AElf.Contracts.Consensus.AEDPoS.MinerList();
        }
        MinerList.MergeFrom(other.MinerList);
      }
      if (other.RoundNumber != 0L) {
        RoundNumber = other.RoundNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (minerList_ == null) {
              MinerList = new global::AElf.Contracts.Consensus.AEDPoS.MinerList();
            }
            input.ReadMessage(MinerList);
            break;
          }
          case 16: {
            RoundNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TinyBlockInput : pb::IMessage<TinyBlockInput> {
    private static readonly pb::MessageParser<TinyBlockInput> _parser = new pb::MessageParser<TinyBlockInput>(() => new TinyBlockInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TinyBlockInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TinyBlockInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TinyBlockInput(TinyBlockInput other) : this() {
      roundId_ = other.roundId_;
      actualMiningTime_ = other.actualMiningTime_ != null ? other.actualMiningTime_.Clone() : null;
      producedBlocks_ = other.producedBlocks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TinyBlockInput Clone() {
      return new TinyBlockInput(this);
    }

    /// <summary>Field number for the "round_id" field.</summary>
    public const int RoundIdFieldNumber = 1;
    private long roundId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "actual_mining_time" field.</summary>
    public const int ActualMiningTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp actualMiningTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ActualMiningTime {
      get { return actualMiningTime_; }
      set {
        actualMiningTime_ = value;
      }
    }

    /// <summary>Field number for the "produced_blocks" field.</summary>
    public const int ProducedBlocksFieldNumber = 3;
    private long producedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProducedBlocks {
      get { return producedBlocks_; }
      set {
        producedBlocks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TinyBlockInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TinyBlockInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoundId != other.RoundId) return false;
      if (!object.Equals(ActualMiningTime, other.ActualMiningTime)) return false;
      if (ProducedBlocks != other.ProducedBlocks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (actualMiningTime_ != null) hash ^= ActualMiningTime.GetHashCode();
      if (ProducedBlocks != 0L) hash ^= ProducedBlocks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundId != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(RoundId);
      }
      if (actualMiningTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ActualMiningTime);
      }
      if (ProducedBlocks != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(ProducedBlocks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(RoundId);
      }
      if (actualMiningTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActualMiningTime);
      }
      if (ProducedBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ProducedBlocks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TinyBlockInput other) {
      if (other == null) {
        return;
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      if (other.actualMiningTime_ != null) {
        if (actualMiningTime_ == null) {
          ActualMiningTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ActualMiningTime.MergeFrom(other.ActualMiningTime);
      }
      if (other.ProducedBlocks != 0L) {
        ProducedBlocks = other.ProducedBlocks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoundId = input.ReadSInt64();
            break;
          }
          case 18: {
            if (actualMiningTime_ == null) {
              ActualMiningTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ActualMiningTime);
            break;
          }
          case 24: {
            ProducedBlocks = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class VoteMinersCountInput : pb::IMessage<VoteMinersCountInput> {
    private static readonly pb::MessageParser<VoteMinersCountInput> _parser = new pb::MessageParser<VoteMinersCountInput>(() => new VoteMinersCountInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteMinersCountInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteMinersCountInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteMinersCountInput(VoteMinersCountInput other) : this() {
      minersCount_ = other.minersCount_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteMinersCountInput Clone() {
      return new VoteMinersCountInput(this);
    }

    /// <summary>Field number for the "miners_count" field.</summary>
    public const int MinersCountFieldNumber = 1;
    private int minersCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinersCount {
      get { return minersCount_; }
      set {
        minersCount_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteMinersCountInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteMinersCountInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinersCount != other.MinersCount) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinersCount != 0) hash ^= MinersCount.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinersCount != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(MinersCount);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinersCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MinersCount);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteMinersCountInput other) {
      if (other == null) {
        return;
      }
      if (other.MinersCount != 0) {
        MinersCount = other.MinersCount;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinersCount = input.ReadSInt32();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ConsensusInformation : pb::IMessage<ConsensusInformation> {
    private static readonly pb::MessageParser<ConsensusInformation> _parser = new pb::MessageParser<ConsensusInformation>(() => new ConsensusInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConsensusInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsensusInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsensusInformation(ConsensusInformation other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConsensusInformation Clone() {
      return new ConsensusInformation(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConsensusInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConsensusInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConsensusInformation other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetMinerListInput : pb::IMessage<GetMinerListInput> {
    private static readonly pb::MessageParser<GetMinerListInput> _parser = new pb::MessageParser<GetMinerListInput>(() => new GetMinerListInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMinerListInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMinerListInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMinerListInput(GetMinerListInput other) : this() {
      termNumber_ = other.termNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMinerListInput Clone() {
      return new GetMinerListInput(this);
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMinerListInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMinerListInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMinerListInput other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RandomNumberRequestInformation : pb::IMessage<RandomNumberRequestInformation> {
    private static readonly pb::MessageParser<RandomNumberRequestInformation> _parser = new pb::MessageParser<RandomNumberRequestInformation>(() => new RandomNumberRequestInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RandomNumberRequestInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomNumberRequestInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomNumberRequestInformation(RandomNumberRequestInformation other) : this() {
      targetRoundNumber_ = other.targetRoundNumber_;
      order_ = other.order_;
      expectedBlockHeight_ = other.expectedBlockHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RandomNumberRequestInformation Clone() {
      return new RandomNumberRequestInformation(this);
    }

    /// <summary>Field number for the "target_round_number" field.</summary>
    public const int TargetRoundNumberFieldNumber = 1;
    private long targetRoundNumber_;
    /// <summary>
    /// The random hash is likely generated during this round.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetRoundNumber {
      get { return targetRoundNumber_; }
      set {
        targetRoundNumber_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 2;
    private long order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "expected_block_height" field.</summary>
    public const int ExpectedBlockHeightFieldNumber = 3;
    private long expectedBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpectedBlockHeight {
      get { return expectedBlockHeight_; }
      set {
        expectedBlockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RandomNumberRequestInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RandomNumberRequestInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetRoundNumber != other.TargetRoundNumber) return false;
      if (Order != other.Order) return false;
      if (ExpectedBlockHeight != other.ExpectedBlockHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetRoundNumber != 0L) hash ^= TargetRoundNumber.GetHashCode();
      if (Order != 0L) hash ^= Order.GetHashCode();
      if (ExpectedBlockHeight != 0L) hash ^= ExpectedBlockHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetRoundNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TargetRoundNumber);
      }
      if (Order != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Order);
      }
      if (ExpectedBlockHeight != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(ExpectedBlockHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetRoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TargetRoundNumber);
      }
      if (Order != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Order);
      }
      if (ExpectedBlockHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ExpectedBlockHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RandomNumberRequestInformation other) {
      if (other == null) {
        return;
      }
      if (other.TargetRoundNumber != 0L) {
        TargetRoundNumber = other.TargetRoundNumber;
      }
      if (other.Order != 0L) {
        Order = other.Order;
      }
      if (other.ExpectedBlockHeight != 0L) {
        ExpectedBlockHeight = other.ExpectedBlockHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetRoundNumber = input.ReadSInt64();
            break;
          }
          case 16: {
            Order = input.ReadSInt64();
            break;
          }
          case 24: {
            ExpectedBlockHeight = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class HashList : pb::IMessage<HashList> {
    private static readonly pb::MessageParser<HashList> _parser = new pb::MessageParser<HashList>(() => new HashList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HashList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashList(HashList other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HashList Clone() {
      return new HashList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Hash> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Hash> values_ = new pbc::RepeatedField<global::AElf.Types.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Hash> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HashList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HashList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HashList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class LatestProviderToTinyBlocksCount : pb::IMessage<LatestProviderToTinyBlocksCount> {
    private static readonly pb::MessageParser<LatestProviderToTinyBlocksCount> _parser = new pb::MessageParser<LatestProviderToTinyBlocksCount>(() => new LatestProviderToTinyBlocksCount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LatestProviderToTinyBlocksCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatestProviderToTinyBlocksCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatestProviderToTinyBlocksCount(LatestProviderToTinyBlocksCount other) : this() {
      pubkey_ = other.pubkey_;
      blocksCount_ = other.blocksCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LatestProviderToTinyBlocksCount Clone() {
      return new LatestProviderToTinyBlocksCount(this);
    }

    /// <summary>Field number for the "pubkey" field.</summary>
    public const int PubkeyFieldNumber = 1;
    private string pubkey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pubkey {
      get { return pubkey_; }
      set {
        pubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "blocks_count" field.</summary>
    public const int BlocksCountFieldNumber = 2;
    private long blocksCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlocksCount {
      get { return blocksCount_; }
      set {
        blocksCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LatestProviderToTinyBlocksCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LatestProviderToTinyBlocksCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pubkey != other.Pubkey) return false;
      if (BlocksCount != other.BlocksCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pubkey.Length != 0) hash ^= Pubkey.GetHashCode();
      if (BlocksCount != 0L) hash ^= BlocksCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pubkey);
      }
      if (BlocksCount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(BlocksCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pubkey);
      }
      if (BlocksCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BlocksCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LatestProviderToTinyBlocksCount other) {
      if (other == null) {
        return;
      }
      if (other.Pubkey.Length != 0) {
        Pubkey = other.Pubkey;
      }
      if (other.BlocksCount != 0L) {
        BlocksCount = other.BlocksCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Pubkey = input.ReadString();
            break;
          }
          case 16: {
            BlocksCount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Events
  /// </summary>
  internal sealed partial class IrreversibleBlockFound : pb::IMessage<IrreversibleBlockFound> {
    private static readonly pb::MessageParser<IrreversibleBlockFound> _parser = new pb::MessageParser<IrreversibleBlockFound>(() => new IrreversibleBlockFound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IrreversibleBlockFound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IrreversibleBlockFound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IrreversibleBlockFound(IrreversibleBlockFound other) : this() {
      irreversibleBlockHeight_ = other.irreversibleBlockHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IrreversibleBlockFound Clone() {
      return new IrreversibleBlockFound(this);
    }

    /// <summary>Field number for the "irreversible_block_height" field.</summary>
    public const int IrreversibleBlockHeightFieldNumber = 1;
    private long irreversibleBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IrreversibleBlockHeight {
      get { return irreversibleBlockHeight_; }
      set {
        irreversibleBlockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IrreversibleBlockFound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IrreversibleBlockFound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IrreversibleBlockHeight != other.IrreversibleBlockHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IrreversibleBlockHeight != 0L) hash ^= IrreversibleBlockHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IrreversibleBlockHeight != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(IrreversibleBlockHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IrreversibleBlockHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(IrreversibleBlockHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IrreversibleBlockFound other) {
      if (other == null) {
        return;
      }
      if (other.IrreversibleBlockHeight != 0L) {
        IrreversibleBlockHeight = other.IrreversibleBlockHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IrreversibleBlockHeight = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class IrreversibleBlockHeightUnacceptable : pb::IMessage<IrreversibleBlockHeightUnacceptable> {
    private static readonly pb::MessageParser<IrreversibleBlockHeightUnacceptable> _parser = new pb::MessageParser<IrreversibleBlockHeightUnacceptable>(() => new IrreversibleBlockHeightUnacceptable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IrreversibleBlockHeightUnacceptable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Consensus.AEDPoS.AedposContractReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IrreversibleBlockHeightUnacceptable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IrreversibleBlockHeightUnacceptable(IrreversibleBlockHeightUnacceptable other) : this() {
      distanceToIrreversibleBlockHeight_ = other.distanceToIrreversibleBlockHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IrreversibleBlockHeightUnacceptable Clone() {
      return new IrreversibleBlockHeightUnacceptable(this);
    }

    /// <summary>Field number for the "distance_to_irreversible_block_height" field.</summary>
    public const int DistanceToIrreversibleBlockHeightFieldNumber = 1;
    private long distanceToIrreversibleBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DistanceToIrreversibleBlockHeight {
      get { return distanceToIrreversibleBlockHeight_; }
      set {
        distanceToIrreversibleBlockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IrreversibleBlockHeightUnacceptable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IrreversibleBlockHeightUnacceptable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DistanceToIrreversibleBlockHeight != other.DistanceToIrreversibleBlockHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DistanceToIrreversibleBlockHeight != 0L) hash ^= DistanceToIrreversibleBlockHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DistanceToIrreversibleBlockHeight != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(DistanceToIrreversibleBlockHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DistanceToIrreversibleBlockHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(DistanceToIrreversibleBlockHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IrreversibleBlockHeightUnacceptable other) {
      if (other == null) {
        return;
      }
      if (other.DistanceToIrreversibleBlockHeight != 0L) {
        DistanceToIrreversibleBlockHeight = other.DistanceToIrreversibleBlockHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DistanceToIrreversibleBlockHeight = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
